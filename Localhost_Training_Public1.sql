CREATE TABLE USERS1(
USER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
USER_N VARCHAR(20), ----- N = NAME
USER_P VARCHAR(30)  ----- P = PASSWORD
);

--------------------------------------------------------------------------------       USERS
--------------------------------------------------------------------------------

CREATE TABLE CHEF(
CHEF_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
CHEF_N VARCHAR(30)NOT NULL, ----- N = NAME
CHEF_S FLOAT,               ----- S = SALARY
USER_FK NUMBER UNIQUE,      ----- FK = FOREIGN KEY
CONSTRAINT USER_F__K FOREIGN KEY(USER_FK) REFERENCES USERS1(USER_ID) ON DELETE CASCADE
);

--------------------------------------------------------------------------------       CHEF
--------------------------------------------------------------------------------

CREATE TABLE WAITER(
WAITER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
WAITER_N VARCHAR(30)NOT NULL , ----- N = NAME
WAITER_S FLOAT,                ----- S = SALARY
WAITER_PH NUMBER UNIQUE,       ----- P = PHONE
USER_FK NUMBER,               ----- FK = FOREIGN KEY
CONSTRAINT USER_F_K FOREIGN KEY(USER_FK) REFERENCES USERS1(USER_ID) ON DELETE CASCADE
);

--------------------------------------------------------------------------------       WAITER
--------------------------------------------------------------------------------

CREATE TABLE CUSTOMER(
CUSTOMER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
CUSTOMER_N VARCHAR(30) NOT NULL ,
C_ADDRESS VARCHAR(40) ,
C_PHONE NUMBER UNIQUE,
WAITER_FK NUMBER,
USER_FK NUMBER,
CONSTRAINT WAITER_FK FOREIGN KEY(WAITER_FK) REFERENCES WAITER(WAITER_ID) ON DELETE SET NULL,
CONSTRAINT USER__FK FOREIGN KEY(USER_FK) REFERENCES USERS1(USER_ID) ON DELETE CASCADE
);

--------------------------------------------------------------------------------       CUSTOMER
--------------------------------------------------------------------------------

CREATE TABLE MEALS(
MEAL_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
MEAL_N VARCHAR(30),
M_PRICE FLOAT ,
CHEF__FK NUMBER,
CONSTRAINT CHEF_F_K FOREIGN KEY(CHEF__FK) REFERENCES CHEF(CHEF_ID ) ON DELETE SET NULL
);

--------------------------------------------------------------------------------       MEALS
--------------------------------------------------------------------------------

CREATE TABLE ORDERS(
ORDER_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
ORDER_N VARCHAR(30),
CUSTOMER_FK NUMBER,
MEAL_FK NUMBER,
CONSTRAINT CUS_FK FOREIGN KEY(CUSTOMER_FK) REFERENCES CUSTOMER(CUSTOMER_ID) ON DELETE CASCADE,
CONSTRAINT MEALL_FK FOREIGN KEY(MEAL_FK) REFERENCES MEALS(MEAL_ID)ON DELETE CASCADE
);


--------------------------------------------------------------------------------       ORDERS
--------------------------------------------------------------------------------

CREATE TABLE SUPPLIER(
SUP_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
SUP_NAME VARCHAR(40),
SUP_PH NUMBER UNIQUE,
CHEF_FK NUMBER,
CONSTRAINT C_HEF_FK FOREIGN KEY(CHEF_FK) REFERENCES CHEF(CHEF_ID) ON DELETE SET NULL
);

--------------------------------------------------------------------------------       SUPPLIER
--------------------------------------------------------------------------------

CREATE TABLE INGREDIENT(
ING_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, ----- ING = INGREDIENT
ING_N VARCHAR(40) NOT NULL,
MEAL_FK NUMBER,
CONSTRAINT MEEAL_FK FOREIGN KEY (MEAL_FK) REFERENCES MEALS(MEAL_ID)
);

--------------------------------------------------------------------------------       INGREDIENT
--------------------------------------------------------------------------------


CREATE TABLE PROVIDES(
PROV_ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
SUP_FK NUMBER,
ING_FK NUMBER, ----- ING = INGREDIENT
CONSTRAINT SUP_F FOREIGN KEY (SUP_FK) REFERENCES SUPPLIER(SUP_ID) ON DELETE SET NULL,
CONSTRAINT ING__FK FOREIGN KEY (ING_FK) REFERENCES INGREDIENT(ING_ID)ON DELETE CASCADE
);

--------------------------------------------------------------------------------       PROVIDES
--------------------------------------------------------------------------------


---------------------------- CRUD FOR CUSTOMER TABLES --------------------------      
---------------------------- CRUD FOR CUSTOMER TABLES --------------------------

CREATE OR REPLACE PACKAGE CUS_PACK 
AS
PROCEDURE ADD_CUS(C_NAME IN CUSTOMER.CUSTOMER_N%TYPE,
                  C_ADDS IN CUSTOMER.C_ADDRESS%TYPE,
                  C_PH IN CUSTOMER.C_PHONE%TYPE,
                  WA_FK IN CUSTOMER.WAITER_FK%TYPE,
                  USE_FK IN CUSTOMER.USER_FK%TYPE);

PROCEDURE DELETE_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE);

PROCEDURE UPDATE_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
                      C_NAME IN CUSTOMER.CUSTOMER_N%TYPE,
                      C_ADDS IN CUSTOMER.C_ADDRESS%TYPE,
                      C_PH IN CUSTOMER.C_PHONE%TYPE,
                      WA_FK IN CUSTOMER.WAITER_FK%TYPE,
                      USE_FK IN CUSTOMER.USER_FK%TYPE);
PROCEDURE SELECT_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE);
                      
END CUS_PACK;

CREATE OR REPLACE PACKAGE BODY CUS_PACK
AS
PROCEDURE ADD_CUS(C_NAME IN CUSTOMER.CUSTOMER_N%TYPE,
                  C_ADDS IN CUSTOMER.C_ADDRESS%TYPE,
                  C_PH IN CUSTOMER.C_PHONE%TYPE,
                  WA_FK IN CUSTOMER.WAITER_FK%TYPE,
                  USE_FK IN CUSTOMER.USER_FK%TYPE)
AS
BEGIN
INSERT INTO CUSTOMER VALUES (DEFAULT , C_NAME,C_ADDS,C_PH,WA_FK,USE_FK);
END ADD_CUS;

PROCEDURE DELETE_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE)
AS
BEGIN
DELETE CUSTOMER WHERE CUSTOMER_ID = C_ID;
END DELETE_CUS;

PROCEDURE UPDATE_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE,
                      C_NAME IN CUSTOMER.CUSTOMER_N%TYPE,
                      C_ADDS IN CUSTOMER.C_ADDRESS%TYPE,
                      C_PH IN CUSTOMER.C_PHONE%TYPE,
                      WA_FK IN CUSTOMER.WAITER_FK%TYPE,
                      USE_FK IN CUSTOMER.USER_FK%TYPE)
AS
BEGIN
UPDATE CUSTOMER SET CUSTOMER_N = C_NAME , C_ADDRESS=C_ADDS,
C_PHONE = C_PH , WAITER_FK = WA_FK , USER_FK = USE_FK
WHERE CUSTOMER_ID = C_ID;
COMMIT;
END UPDATE_CUS;
PROCEDURE SELECT_CUS (C_ID IN CUSTOMER.CUSTOMER_ID%TYPE)
as
C_NAME CUSTOMER.CUSTOMER_N%TYPE;
C_ADDS CUSTOMER.C_ADDRESS%TYPE;
C_PH CUSTOMER.C_PHONE%TYPE;
WA_FK CUSTOMER.WAITER_FK%TYPE;
USE_FK CUSTOMER.USER_FK%TYPE;
BEGIN 
SELECT CUSTOMER_N,C_ADDRESS,C_PHONE,WAITER_FK,USER_FK into C_NAME,C_ADDS,C_PH,WA_FK,USE_FK
FROM CUSTOMER
WHERE CUSTOMER_ID = C_ID;
END SELECT_CUS;

END CUS_PACK;

---------------------------- CRUD FOR USERS1 TABLES --------------------------      
---------------------------- CRUD FOR USERS1 TABLES --------------------------
CREATE OR REPLACE PACKAGE USERS_PACK 
AS
PROCEDURE ADD_USER(U_NAME IN USERS1.USER_N%TYPE,
                  U_PASS IN USERS1.USER_P%TYPE);

PROCEDURE DELETE_USER (U_ID IN USERS1.USER_ID%TYPE);

PROCEDURE UPDATE_USER (U_ID IN USERS1.USER_ID%TYPE,
                      U_NAME IN USERS1.USER_N%TYPE,
                      U_PASS IN USERS1.USER_P%TYPE);
PROCEDURE SELECT_USER (U_ID IN USERS1.USER_ID%TYPE);
                     
END USERS_PACK;

CREATE OR REPLACE PACKAGE BODY USERS_PACK
AS
PROCEDURE ADD_USER(U_NAME IN USERS1.USER_N%TYPE,
                  U_PASS IN USERS1.USER_P%TYPE)
AS
BEGIN
INSERT INTO USERS1 VALUES (DEFAULT ,U_NAME,U_PASS);
END ADD_USER;

PROCEDURE DELETE_USER (U_ID IN USERS1.USER_ID%TYPE)
AS
BEGIN
DELETE USERS1 WHERE USER_ID = U_ID;
END DELETE_USER;

PROCEDURE UPDATE_USER (U_ID IN USERS1.USER_ID%TYPE,
                       U_NAME IN USERS1.USER_N%TYPE,
                       U_PASS IN USERS1.USER_P%TYPE)
AS
BEGIN
UPDATE USERS1 SET USER_N = U_NAME ,USER_P=U_PASS
WHERE USER_ID = U_ID;
END UPDATE_USER;

PROCEDURE SELECT_USER (U_ID IN USERS1.USER_ID%TYPE)
AS
U_NAME USERS1.USER_N%TYPE;
U_PASS  USERS1.USER_P%TYPE;
BEGIN
SELECT USER_N,USER_P INTO U_NAME,U_PASS 
FROM USERS1
WHERE USER_ID = U_ID;
END SELECT_USER;

END USERS_PACK;

---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------

CREATE OR REPLACE PACKAGE CHEF_PACK
AS

PROCEDURE ADD_CHEF(N_CHEF IN CHEF.CHEF_N%TYPE , 
                   S_CHEF IN CHEF.CHEF_S%TYPE,
                   U__FK IN CHEF.USER_FK%TYPE);
                   
PROCEDURE DELETE_CHEF(CH_ID IN CHEF.CHEF_ID%TYPE);


PROCEDURE UPDATE_CHEF(CH_ID IN CHEF.CHEF_ID%TYPE,
                      N_CHEF IN CHEF.CHEF_N%TYPE,
                      S_CHEF IN CHEF.CHEF_S%TYPE,
                      U__FK IN CHEF.USER_FK%TYPE);
                      
PROCEDURE VIEW_CHEF(CH__ID IN CHEF.CHEF_ID%TYPE);
END CHEF_PACK;



CREATE OR REPLACE PACKAGE BODY CHEF_PACK 
AS
procedure ADD_CHEF(N_CHEF IN CHEF.CHEF_N%TYPE , 
                   S_CHEF IN CHEF.CHEF_S%TYPE,
                   U__FK IN CHEF.USER_FK%TYPE)
AS
BEGIN 
INSERT INTO CHEF VALUES (DEFAULT , N_CHEF, S_CHEF,U__FK);
END ADD_CHEF;

PROCEDURE DELETE_CHEF(CH_ID IN CHEF.CHEF_ID%TYPE)
AS
BEGIN
DELETE CHEF WHERE CHEF_ID=CH_ID;
END DELETE_CHEF;

PROCEDURE UPDATE_CHEF(CH_ID IN CHEF.CHEF_ID%TYPE,
                      N_CHEF IN CHEF.CHEF_N%TYPE,
                      S_CHEF IN CHEF.CHEF_S%TYPE,
                      U__FK IN CHEF.USER_FK%TYPE)

AS 
BEGIN

UPDATE CHEF SET CHEF_N = N_CHEF ,CHEF_S=S_CHEF,USER_FK=U__FK
WHERE CHEF_ID = CH_ID;
END UPDATE_CHEF;

PROCEDURE VIEW_CHEF(CH__ID IN CHEF.CHEF_ID%TYPE)
IS

C_NAME CHEF.CHEF_N%TYPE;
S_CHEF CHEF.CHEF_S%TYPE;
U__FK CHEF.USER_FK%TYPE;
BEGIN
SELECT CHEF_N,CHEF_S,USER_FK INTO C_NAME,S_CHEF,U__FK 
FROM CHEF
WHERE CHEF_ID=CH__ID;

END VIEW_CHEF;

END CHEF_PACK;
---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------

DECLARE
INO CHEF.CHEF_ID%TYPE;

BEGIN
CHEF_PACK.VIEW_CHEF(&INO);
END;


---------------------------- CRUD FOR USERS1 TABLES --------------------------      
---------------------------- CRUD FOR USERS1 TABLES --------------------------
CREATE OR REPLACE PACKAGE MEALS_PACK
AS
PROCEDURE ADD_MEAL(M_NAME IN MEALS.MEAL_N%TYPE,
                   M_PRI IN MEALS.M_PRICE%TYPE,
                   CH__FK IN MEALS.CHEF__FK%TYPE);
                   
PROCEDURE DELETE_MEAL (M__ID IN MEALS.MEAL_ID%TYPE);

PROCEDURE UPDATE_MEAL (M__ID IN MEALS.MEAL_ID%TYPE,
                       M_NAME IN MEALS.MEAL_N%TYPE,
                       M_PRI IN MEALS.M_PRICE%TYPE,
                       CH__FK IN MEALS.CHEF__FK%TYPE);
                       
PROCEDURE VIEW_MEAL (M__ID IN MEALS.MEAL_ID%TYPE);

END MEALS_PACK;

CREATE OR REPLACE PACKAGE BODY MEALS_PACK
AS
PROCEDURE ADD_MEAL(M_NAME IN MEALS.MEAL_N%TYPE,
                   M_PRI IN MEALS.M_PRICE%TYPE,
                   CH__FK IN MEALS.CHEF__FK%TYPE)
AS
BEGIN
INSERT INTO MEALS VALUES (DEFAULT , M_NAME,M_PRI,CH__FK);
END ADD_MEAL;

PROCEDURE DELETE_MEAL (M__ID IN MEALS.MEAL_ID%TYPE)
AS
BEGIN
DELETE MEALS WHERE MEAL_ID = M__ID;
END DELETE_MEAL;

PROCEDURE UPDATE_MEAL (M__ID IN MEALS.MEAL_ID%TYPE,
                       M_NAME IN MEALS.MEAL_N%TYPE,
                       M_PRI IN MEALS.M_PRICE%TYPE,
                       CH__FK IN MEALS.CHEF__FK%TYPE)
AS
BEGIN
UPDATE MEALS SET MEAL_N =M_NAME,M_PRICE=M_PRI,CHEF__FK=CH__FK
WHERE MEAL_ID = M__ID;
END UPDATE_MEAL;
PROCEDURE VIEW_MEAL (M__ID IN MEALS.MEAL_ID%TYPE)
IS
M_NAME MEALS.MEAL_N%TYPE;
M_PRI MEALS.M_PRICE%TYPE;
CH__FK MEALS.CHEF__FK%TYPE;

BEGIN
SELECT MEAL_N , M_PRICE,CHEF__FK INTO M_NAME,M_PRI,CH__FK
FROM MEALS
WHERE MEAL_ID=M__ID;
END VIEW_MEAL;
END MEALS_PACK;
---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------
DROP PACKAGE INGREDIENT_PACK;
CREATE OR REPLACE PACKAGE INGREDIENT_PACK
AS
PROCEDURE ADD_ING(N_ING IN INGREDIENT.ING_N%TYPE,
                   FK_MEAL1 IN INGREDIENT.MEAL_FK%TYPE);


PROCEDURE DELETE_ING(ID_ING IN INGREDIENT.ING_ID%TYPE);


PROCEDURE UPDATE_ING(ID_ING IN INGREDIENT.ING_ID%TYPE,
                     N_ING IN INGREDIENT.ING_N%TYPE,
                     FK_MEAL1 IN INGREDIENT.MEAL_FK%TYPE);


PROCEDURE VIEW_ING(ID_ING IN INGREDIENT.ING_ID%TYPE);

END INGREDIENT_PACK;

CREATE OR REPLACE PACKAGE BODY INGREDIENT_PACK
AS
PROCEDURE ADD_ING(N_ING IN INGREDIENT.ING_N%TYPE,
                   FK_MEAL1 IN INGREDIENT.MEAL_FK%TYPE)
AS
BEGIN
INSERT INTO INGREDIENT VALUES(DEFAULT,N_ING,FK_MEAL1);
END ADD_ING;

PROCEDURE DELETE_ING(ID_ING IN INGREDIENT.ING_ID%TYPE)
AS
BEGIN
DELETE INGREDIENT WHERE ING_ID=ID_ING;
END DELETE_ING;
PROCEDURE UPDATE_ING(ID_ING IN INGREDIENT.ING_ID%TYPE,
                     N_ING IN INGREDIENT.ING_N%TYPE,
                     FK_MEAL1 IN INGREDIENT.MEAL_FK%TYPE)
AS
BEGIN
UPDATE INGREDIENT SET ING_N = N_ING , MEAL_FK = FK_MEAL1 
WHERE ING_ID = ID_ING;
END UPDATE_ING;
PROCEDURE VIEW_ING(ID_ING IN INGREDIENT.ING_ID%TYPE)
AS
N_ING INGREDIENT.ING_N%TYPE;
FK_MEAL1 INGREDIENT.MEAL_FK%TYPE;
BEGIN
SELECT ING_N , MEAL_FK  INTO N_ING,FK_MEAL1
FROM INGREDIENT
WHERE ING_ID = ID_ING;

END VIEW_ING;


END INGREDIENT_PACK;
---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------
CREATE OR REPLACE PACKAGE ORDERS1
AS
PROCEDURE ADD_ORDERS(OR_NA IN ORDERS.ORDER_N%TYPE,
                     CUS_FK1 IN ORDERS.CUSTOMER_FK%TYPE,
                     ME_FK IN ORDERS.MEAL_FK%TYPE);


PROCEDURE DELETE_ORDERS(ORD_ID IN ORDERS.ORDER_ID%TYPE);

PROCEDURE UPDATE_ORDERS(ORD_ID IN ORDERS.ORDER_ID%TYPE,
                        OR_NA IN ORDERS.ORDER_N%TYPE,
                        CUS_FK1 IN ORDERS.CUSTOMER_FK%TYPE,
                        ME_FK IN ORDERS.MEAL_FK%TYPE);

PROCEDURE VIEW_ORDERS(ORD_ID IN ORDERS.ORDER_ID%TYPE);

END ORDERS1;


CREATE OR REPLACE PACKAGE BODY ORDERS1
AS

PROCEDURE ADD_ORDERS(OR_NA IN ORDERS.ORDER_N%TYPE,
           CUS_FK1 IN ORDERS.CUSTOMER_FK%TYPE,
           ME_FK IN ORDERS.MEAL_FK%TYPE)
AS
BEGIN 
INSERT INTO ORDERS VALUES (DEFAULT , OR_NA,CUS_FK1,ME_FK);
END ADD_ORDERS;

PROCEDURE DELETE_ORDERS (ORD_ID IN ORDERS.ORDER_ID%TYPE)
AS
BEGIN
DELETE ORDERS WHERE ORDER_ID = ORD_ID;
END DELETE_ORDERS;

PROCEDURE UPDATE_ORDERS(ORD_ID IN ORDERS.ORDER_ID%TYPE,
                        OR_NA IN ORDERS.ORDER_N%TYPE,
                        CUS_FK1 IN ORDERS.CUSTOMER_FK%TYPE,
                        ME_FK IN ORDERS.MEAL_FK%TYPE)
AS
BEGIN
UPDATE ORDERS SET ORDER_N=OR_NA , CUSTOMER_FK = CUS_FK1,MEAL_FK = ME_FK
WHERE ORDER_ID = ORD_ID;
END UPDATE_ORDERS;

PROCEDURE VIEW_ORDERS(ORD_ID IN ORDERS.ORDER_ID%TYPE)
AS
OR_NA ORDERS.ORDER_N%TYPE;
CUS_FK1 ORDERS.CUSTOMER_FK%TYPE;
ME_FK ORDERS.MEAL_FK%TYPE;
BEGIN
SELECT ORDER_N,CUSTOMER_FK,MEAL_FK INTO OR_NA ,CUS_FK1,ME_FK
FROM ORDERS 
WHERE ORDER_ID = OR_NA;

END VIEW_ORDERS;

END ORDERS1;

---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------
CREATE OR REPLACE PACKAGE PROVIDE1
AS
PROCEDURE ADD_PROVIDES(FK_SUP1 IN PROVIDES.SUP_FK%TYPE,
                       FK_ING1 IN PROVIDES.ING_FK%TYPE);
                       
PROCEDURE DELETE_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE);

PROCEDURE UPDATE_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE,
                          FK_SUP1 IN PROVIDES.SUP_FK%TYPE,
                          FK_ING1 IN PROVIDES.ING_FK%TYPE);

PROCEDURE VIEW_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE);

END PROVIDE1;


CREATE OR REPLACE PACKAGE BODY PROVIDE1
AS

PROCEDURE ADD_PROVIDES(FK_SUP1 IN PROVIDES.SUP_FK%TYPE,
                       FK_ING1 IN PROVIDES.ING_FK%TYPE)
AS
BEGIN
INSERT INTO PROVIDES VALUES(DEFAULT ,FK_SUP1 ,FK_ING1);
END ADD_PROVIDES;

PROCEDURE DELETE_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE)
AS
BEGIN
DELETE PROVIDES WHERE PROV_ID = ID_PROV;
END DELETE_PROVIDES;

PROCEDURE UPDATE_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE,
                          FK_SUP1 IN PROVIDES.SUP_FK%TYPE,
                          FK_ING1 IN PROVIDES.ING_FK%TYPE)
AS
BEGIN
UPDATE PROVIDES SET SUP_FK = FK_SUP1 , ING_FK = FK_ING1
WHERE PROV_ID = ID_PROV;
END UPDATE_PROVIDES;

PROCEDURE VIEW_PROVIDES(ID_PROV IN PROVIDES.PROV_ID%TYPE)
AS
FK_SUP1 PROVIDES.SUP_FK%TYPE;
FK_ING1 PROVIDES.ING_FK%TYPE;
BEGIN
SELECT SUP_FK,ING_FK INTO FK_SUP1,FK_ING1 
FROM PROVIDES
WHERE PROV_ID = ID_PROV;
END VIEW_PROVIDES;

END PROVIDE1;

---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------

CREATE OR REPLACE PACKAGE SUPPLIERS1
AS
PROCEDURE ADD_SUP(S_NAME IN SUPPLIER.SUP_NAME%TYPE,
                  S_PHONE IN SUPPLIER.SUP_PH%TYPE,
                  CH_FK2 IN SUPPLIER.CHEF_FK%TYPE);
PROCEDURE DELETE_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE);


PROCEDURE UPDATE_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE,
                      S_NAME IN SUPPLIER.SUP_NAME%TYPE,
                      S_PHONE IN SUPPLIER.SUP_PH%TYPE,
                      CH_FK2 IN SUPPLIER.CHEF_FK%TYPE);
PROCEDURE SELECT_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE);

END SUPPLIERS1;

CREATE OR REPLACE PACKAGE BODY SUPPLIERS1
AS
PROCEDURE ADD_SUP(S_NAME IN SUPPLIER.SUP_NAME%TYPE,
                  S_PHONE IN SUPPLIER.SUP_PH%TYPE,
                  CH_FK2 IN SUPPLIER.CHEF_FK%TYPE)
AS
BEGIN 
INSERT INTO SUPPLIER VALUES (DEFAULT , S_NAME,S_PHONE,CH_FK2);
END ADD_SUP;

PROCEDURE DELETE_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE)
AS
BEGIN
DELETE SUPPLIER WHERE SUP_ID = ID_SUP;
END DELETE_SUP;

PROCEDURE UPDATE_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE,
                      S_NAME IN SUPPLIER.SUP_NAME%TYPE,
                      S_PHONE IN SUPPLIER.SUP_PH%TYPE,
                      CH_FK2 IN SUPPLIER.CHEF_FK%TYPE)
AS
BEGIN
UPDATE SUPPLIER SET SUP_NAME = S_NAME , SUP_PH = S_PHONE , CHEF_FK=CH_FK2
WHERE SUP_ID = ID_SUP;
END UPDATE_SUP;

PROCEDURE SELECT_SUP (ID_SUP IN SUPPLIER.SUP_ID%TYPE)
AS
S_NAME SUPPLIER.SUP_NAME%TYPE;
S_PHONE SUPPLIER.SUP_PH%TYPE;
CH_FK2 SUPPLIER.CHEF_FK%TYPE;
BEGIN 
SELECT SUP_NAME,SUP_PH,CHEF_FK INTO S_NAME,S_PHONE,CH_FK2
FROM SUPPLIER
WHERE SUP_ID = ID_SUP;

END SELECT_SUP;
END SUPPLIERS1;

---------------------------- CRUD FOR TABLES -----------------------------------      
---------------------------- CRUD FOR TABLES -----------------------------------
CREATE OR REPLACE PACKAGE WAITER1
AS
PROCEDURE ADD_WAITER(W_NAME IN WAITER.WAITER_N%TYPE,
                    W_SALARY IN WAITER.WAITER_S%TYPE,
                    W_PHONE IN WAITER.WAITER_PH%TYPE,
                    FK_USER IN WAITER.USER_FK%TYPE);
                    
PROCEDURE DELETE_WAITER(W__ID IN WAITER.WAITER_ID%TYPE);

PROCEDURE UPDATE_WAITER (W__ID IN WAITER.WAITER_ID%TYPE,
                    W_NAME IN WAITER.WAITER_N%TYPE,
                    W_SALARY IN WAITER.WAITER_S%TYPE,
                    W_PHONE IN WAITER.WAITER_PH%TYPE,
                    FK_USER IN WAITER.USER_FK%TYPE);



PROCEDURE SELECT_WAITER(W__ID IN WAITER.WAITER_ID%TYPE);

END WAITER1;


CREATE OR REPLACE PACKAGE BODY WAITER1
AS
PROCEDURE ADD_WAITER(W_NAME IN WAITER.WAITER_N%TYPE,
                    W_SALARY IN WAITER.WAITER_S%TYPE,
                    W_PHONE IN WAITER.WAITER_PH%TYPE,
                    FK_USER IN WAITER.USER_FK%TYPE)
AS
BEGIN
INSERT INTO WAITER VALUES (DEFAULT,W_NAME,W_SALARY,W_PHONE,FK_USER);
END ADD_WAITER;

PROCEDURE DELETE_WAITER(W__ID IN WAITER.WAITER_ID%TYPE)
AS
BEGIN
DELETE WAITER WHERE WAITER_ID = W__ID;
END DELETE_WAITER;

PROCEDURE UPDATE_WAITER (W__ID IN WAITER.WAITER_ID%TYPE,
                    W_NAME IN WAITER.WAITER_N%TYPE,
                    W_SALARY IN WAITER.WAITER_S%TYPE,
                    W_PHONE IN WAITER.WAITER_PH%TYPE,
                    FK_USER IN WAITER.USER_FK%TYPE)
AS
BEGIN 
UPDATE WAITER SET WAITER_N = W_NAME , WAITER_S = W_SALARY , WAITER_PH =W_PHONE , USER_FK = FK_USER
WHERE WAITER_ID = W__ID;
END UPDATE_WAITER;
PROCEDURE SELECT_WAITER(W__ID IN WAITER.WAITER_ID%TYPE)
AS
W_NAME WAITER.WAITER_N%TYPE;
W_SALARY WAITER.WAITER_S%TYPE;
W_PHONE WAITER.WAITER_PH%TYPE;
FK_USER WAITER.USER_FK%TYPE;
BEGIN
SELECT WAITER_N,WAITER_S,WAITER_PH,USER_FK INTO W_NAME,W_SALARY,W_PHONE,FK_USER
FROM WAITER
WHERE WAITER_ID = W__ID;
END SELECT_WAITER;

END WAITER1;
---------------------------- END CRUD FOR TABLES -------------------------------      
---------------------------- END CRUD FOR TABLES -------------------------------


------------- Entering data and deleting it through the procedures --------------
------------- Entering data and deleting it through the procedures --------------
------------- Entering data and deleting it through the procedures --------------

BEGIN
USERS_PACK.ADD_USER('FERAS','FERAS123');
USERS_PACK.ADD_USER('AHMAD','FERAS123');
USERS_PACK.ADD_USER('YAZED','FERAS123');
USERS_PACK.ADD_USER('AMJAD','FERAS123');
END;
BEGIN
USERS_PACK.UPDATE_USER(1,'FERAS','FERAS321');
END;
BEGIN
USERS_PACK.DELETE_USER(4);
END;
BEGIN
USERS_PACK.SELECT_USER(1);
END;

--------------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE WEKKLY_SALES
AS
PROCEDURE FIND_WEKLYSALES(ORDER_NUM IN ORDERS.ORDER_ID%TYPE , 
MEAL_F IN ORDERS.MEAL_FK%TYPE ,
PRICE IN MEALS.M_PRICE%TYPE);

END WEKKLY_SALES;

CREATE OR REPLACE PACKAGE BODY WEKKLY_SALES
AS
PROCEDURE FIND_WEKLYSALES(ORDER_NUM IN ORDERS.ORDER_ID%TYPE , 
MEAL_F IN ORDERS.MEAL_FK%TYPE ,
PRICE IN MEALS.M_PRICE%TYPE)
AS
BEGIN
SELECT SUM(MEAL_FK) INTO MEAL_FK
FROM ORDERS
WHERE ORDER_ID = ORDER_NUM;
END;
END WAKKLY_SALES;





















